#+title: My Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles.css" />
* Ignore this
#+begin_src emacs-lisp
  (load-file (locate-user-emacs-file "custom.el"))
#+end_src
* One time config
#+begin_src emacs-lisp
  ;;IGNORE THIS AFTER SETUP
  (setq evil 0)
  (if (eq evil 1) (message "test"))
  ;;IGNORE THIS AFTER SETUP
#+end_src
* Base config
** Basic UI config
*** Disabling basic UI components
#+begin_src emacs-lisp
    (menu-bar-mode -1)            ; Disable the menu bar
    (setq-default cursor-type 'bar)
    (scroll-bar-mode 1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    ;(set-fringe-mode 10)        ; Give some breathing room
    (setq inhibit-startup-message t)
#+end_src
*** Line numbers
#+begin_src emacs-lisp
    (column-number-mode)
    (global-display-line-numbers-mode t)
    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

    (set-face-attribute 'default nil :font "Hack Nerd Font-400" :height 140)
#+end_Src
** Package management config
*** Adding archives
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                            ("org" . "https://orgmode.org/elpa/")
                        ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
#+end_src 
*** Bootstraping use-package
#+begin_src emacs-lisp
  ;; bootstrap use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src 
** Basic Theming
*** Transparency
#+begin_src emacs-lisp
  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(95 . 95))

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src 0
*** Dracula Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;(load-theme 'doom-dracula t)
    (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
  (load-theme 'doom-dracula)
#+end_src 
*** Doom modeline
#+begin_src emacs-lisp
    (use-package all-the-icons)
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :config
      ;; How tall the mode-line should be. It's only respected in GUI.
      ;; If the actual char height is larger, it respects the actual height.
      (setq doom-modeline-height 25)

      ;; How wide the mode-line bar should be. It's only respected in GUI.
      (setq doom-modeline-bar-width 4)

      ;; Whether to use hud instead of default bar. It's only respected in UI.
      (setq doom-modeline-hud t))
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src 
** Completion
*** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    ;(setq counsel-find-file-ignore-regexp "\\.gitignore\\")
    (setq counsel-find-file-ignore-regexp (concat  "\\(?:\\`.gitignore\\)" "\\(?:\\`[#.]\\)" "\\|\\(?:\\`.+?[#~]\\'\\)"))
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src 
*** counsel
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src 
*** Misc completion packages
#+begin_src emacs-lisp
  (use-package smex)
  (use-package hydra)  
#+end_src 
** Misc
*** Recentf
#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 10)
(setq recentf-max-saved-items 10)
;(recentf-open-files)
#+end_src 
*** Trash handling
**** Trash handling packages
#+begin_src emacs-lisp
  (use-package no-littering)
#+end_src 
**** Trash handling misc
#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
(setq auto-save-default nil)
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq auto-save-interval 1)
#+end_src 
*** Misc Packages
#+begin_src emacs-lisp
  (use-package treemacs)
  (use-package centered-cursor-mode
    :config (global-centered-cursor-mode))
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
** Evil mode
#+begin_src emacs-lisp
  (if (eq evil 1) (load (locate-user-emacs-file "evil.el")))
#+end_src
#+begin_src emacs-lisp :tangle evil.el

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)

    (define-key evil-insert-state-map (kbd "C-h") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-j") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

   (global-evil-leader-mode)

   (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** Keybindings
*** Keybindings Packages
#+begin_src emacs-lisp
  (use-package general)
#+end_src
*** Moving
#+begin_src emacs-lisp
  (if (eq evil 0) (general-define-key
                   :prefix "C-x"
                   "h" 'windmove-left
                   "j" 'windmove-up
                   "k" 'windmove-down
                   "l" 'windmove-right)
    )
#+end_src
*** Buffers
#+begin_src emacs-lisp
  (if (eq evil 0) (general-define-key
                   :prefix "C-c"
                   "b" 'switch-to-buffer
                   "w" 'kill-this-buffer
                   "C-w" 'kill-buffer)
    )
#+end_src 
*** Misc
#+begin_src emacs-lisp
   (if (eq evil 0) (global-set-key (kbd "C-c e")   'treemacs))
   (if (eq evil 0) (global-set-key (kbd "C-c C-r") 'recentf-open-files))
  (general-define-key
   :prefix "C-c"
   ;; bind "C-c a" to 'org-agenda
   "e" 'treemacs
   "C-r" 'recentf-open-files)
 #+end_src 
** Org Config
*** Org packages
#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")
  (setq org-export-headline-levels 10)
  (efs/org-font-setup))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src 
*** Org base config
#+begin_src emacs-lisp
(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Hack Nerd Font" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(defun efs/org-mode-setup ()
  (org-indent-mode)
  (org-bullets-mode)
  (variable-pitch-mode 1))
#+end_src 
*** Org language config
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  (setq org-html-validation-link nil)

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

  (setq org-html-validation-link nil)
  #+end_src 
* IDE config
** Misc IDE Packages
#+begin_src emacs-lisp
#+end_src 0
** LSP
*** LSP packages
#+begin_src emacs-lisp
      (use-package lsp-mode
        :commands (lsp lsp-deferred)
        :init
        (setq lsp-keymap-prefix "C-c l")
        :config
        (lsp-enable-which-key-integration t))
#+end_src
*** LSP Languages
**** Lua
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src
**** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level))
#+end_src 0
**** Python
#+begin_src emacs-lisp
      (use-package lsp-pyright
        :ensure t
        :hook (python-mode . (lambda ()
                               (require 'lsp-pyright)
                               (lsp-deferred))))  ; or lsp-deferred
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom (projectile-completion-system 'ivy)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "C:/Users/Elias/Desktop/Git-repos/")
      (setq projectile-project-search-path '("C:/Users/Elias/Desktop/Git-repos/")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src 
